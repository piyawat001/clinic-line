const User = require('../models/User');
const Booking = require('../models/Booking');
const lineConfig = require('../config/line-config');
const axios = require('axios');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');

// ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢
function formatThaiDate(date) {
  const options = { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    weekday: 'long'
  };
  return new Date(date).toLocaleDateString('th-TH', options);
}

// @desc    Handle LINE webhook events
// @route   POST /api/line/webhook
// @access  Public
exports.handleWebhook = async (req, res) => {
  try {
    const events = req.body.events;
    
    if (!events || events.length === 0) {
      return res.status(200).send('No events');
    }
    
    // Process each event
    for (const event of events) {
      await processEvent(event);
    }
    
    res.status(200).send('OK');
  } catch (error) {
    console.error('LINE Webhook Error:', error);
    res.status(500).send('Error processing webhook');
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å LINE
const processEvent = async (event) => {
  try {
    const { type, source, message, replyToken } = event;
    
    // Handle only user messages for now
    if (source.type !== 'user') return;
    
    const lineUserId = source.userId;
    
    // Handle message events
    if (type === 'message' && message.type === 'text') {
      const userMessage = message.text;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      if (userMessage.includes('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á') || userMessage.includes('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö')) {
        await sendBookingInfo(lineUserId, replyToken);
      }
      // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß
      else if (userMessage.includes('‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß') || userMessage.includes('‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢')) {
        await replyMessage(replyToken, generateBookingLink(lineUserId));
      } 
      // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      else if (userMessage.includes('help') || userMessage.includes('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠')) {
        await replyMessage(replyToken, getHelpMessage());
      }
      // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      else {
        await replyMessage(replyToken, getDefaultResponse());
      }
    }
  } catch (error) {
    console.error('Error processing event:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
async function sendBookingInfo(lineUserId, replyToken) {
  try {
    // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE User ID
    const user = await User.findOne({ lineUserId });
    
    if (!user) {
      return replyMessage(replyToken, {
        type: 'text',
        text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
      });
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    const futureBookings = await Booking.find({ 
      user: user._id,
      status: { $ne: 'cancelled' },
      appointmentDate: { $gte: new Date() }
    }).sort({ appointmentDate: 1, appointmentTime: 1 });
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    const pastBookings = await Booking.find({
      user: user._id,
      $or: [
        { appointmentDate: { $lt: new Date() } },
        { status: 'cancelled' }
      ]
    }).sort({ appointmentDate: -1 }).limit(3);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    let replyText = '';
    
    if (futureBookings.length === 0 && pastBookings.length === 0) {
      replyText = '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
    } else {
      replyText = `üìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üìÖ\n\n`;
      
      if (futureBookings.length > 0) {
        replyText += `‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á:\n`;
        futureBookings.forEach((booking, index) => {
          replyText += `${index + 1}. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatThaiDate(booking.appointmentDate)}\n`;
          replyText += `   ‡πÄ‡∏ß‡∏•‡∏≤: ${booking.appointmentTime} ‡∏ô.\n`;
          replyText += `   ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: ${booking.initialSymptoms}\n`;
          replyText += `   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${getStatusText(booking.status)}\n\n`;
        });
      }
      
      if (pastBookings.length > 0) {
        replyText += `üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:\n`;
        pastBookings.forEach((booking, index) => {
          replyText += `${index + 1}. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatThaiDate(booking.appointmentDate)}\n`;
          replyText += `   ‡πÄ‡∏ß‡∏•‡∏≤: ${booking.appointmentTime} ‡∏ô.\n`;
          replyText += `   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${getStatusText(booking.status)}\n\n`;
        });
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
      replyText += `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà:\n`;
      replyText += `${process.env.FRONTEND_URL || 'http://localhost:3000'}/login`;
    }
    
    await replyMessage(replyToken, { type: 'text', text: replyText });
  } catch (error) {
    console.error('Error sending booking info:', error);
    await replyMessage(replyToken, { 
      type: 'text', 
      text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' 
    });
  }
}

// ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
function getStatusText(status) {
  switch (status) {
    case 'pending': return '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
    case 'success': return '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
    case 'cancelled': return '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
    default: return status;
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß
function generateBookingLink(lineUserId) {
  const bookingUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/booking?line_user_id=${lineUserId}`;
  
  return {
    type: 'template',
    altText: '‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß',
    template: {
      type: 'buttons',
      title: '‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß',
      text: '‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
      actions: [
        {
          type: 'uri',
          label: '‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà',
          uri: bookingUrl
        },
        {
          type: 'uri',
          label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
          uri: `${process.env.FRONTEND_URL || 'http://localhost:3000'}/bookings?line_user_id=${lineUserId}`
        }
      ]
    }
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
function getHelpMessage() {
  return {
    type: 'text',
    text: 'üìå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:\n\n' +
          '‚Ä¢ "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß" - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà\n' +
          '‚Ä¢ "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n' +
          '‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ\n\n' +
          'üìù ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ 02-xxx-xxxx'
  };
}

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
function getDefaultResponse() {
  return {
    type: 'text',
    text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô LINE
const replyMessage = async (replyToken, messages) => {
  try {
    await axios.post(
      'https://api.line.me/v2/bot/message/reply',
      {
        replyToken,
        messages: Array.isArray(messages) ? messages : [messages]
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${lineConfig.channelSecret}`
        }
      }
    );
  } catch (error) {
    console.error('Error replying to LINE message:', error);
  }
};

// @desc    Handle LINE login callback
// @route   GET /api/line/callback
// @access  Public
exports.handleCallback = async (req, res) => {
  try {
    const { code, state } = req.query;
    
    if (!code) {
      return res.status(400).send('Authorization code not found');
    }
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LINE API ‡∏à‡∏£‡∏¥‡∏á
    if (code === 'abc123' || code === 'test_code') {
      console.log('TEST MODE: Simulating LINE Login callback');
      return res.redirect(`${process.env.FRONTEND_URL || 'http://localhost:3000'}/login-success?token=test_token`);
    }
    
    // Exchange authorization code for access token
    const tokenResponse = await axios.post(
      'https://api.line.me/oauth2/v2.1/token',
      {
        grant_type: 'authorization_code',
        code,
        redirect_uri: `${process.env.BACKEND_URL || 'http://localhost:5001'}/api/line/callback`,
        client_id: lineConfig.channelId,
        client_secret: lineConfig.channelSecret
      },
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }
    );
    
    const { access_token, id_token } = tokenResponse.data;
    
    // Get user profile from LINE
    const profileResponse = await axios.get('https://api.line.me/v2/profile', {
      headers: {
        Authorization: `Bearer ${access_token}`
      }
    });
    
    const { userId: lineUserId, displayName } = profileResponse.data;
    
    // Check if user exists with this LINE user ID
    let user = await User.findOne({ lineUserId });
    
    if (!user) {
      // If state contains a userId, link LINE account to existing user
      if (state) {
        user = await User.findById(state);
        
        if (user) {
          user.lineUserId = lineUserId;
          await user.save();
        }
      }
    }
    
    // Redirect to frontend with token or registration page
    if (user) {
      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
        expiresIn: '30d',
      });
      
      return res.redirect(`${process.env.FRONTEND_URL || 'http://localhost:3000'}/login-success?token=${token}`);
    } else {
      // Redirect to registration page with LINE user ID as parameter
      return res.redirect(`${process.env.FRONTEND_URL || 'http://localhost:3000'}/register?line_user_id=${lineUserId}&name=${encodeURIComponent(displayName)}`);
    }
  } catch (error) {
    console.error('LINE Callback Error:', error);
    res.status(500).send('Error processing LINE login callback');
  }
};

// @desc    Test sending LINE notification
// @route   POST /api/line/send-notification
// @access  Private
exports.testSendNotification = async (req, res) => {
  try {
    const { bookingId, notificationType } = req.body;
    
    if (!bookingId || !notificationType) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ bookingId ‡πÅ‡∏•‡∏∞ notificationType' });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ bookingId ‡πÄ‡∏õ‡πá‡∏ô valid ObjectId
    if (!mongoose.Types.ObjectId.isValid(bookingId)) {
      return res.status(400).json({ message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö bookingId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const booking = await Booking.findById(bookingId).populate('user', 'firstName lastName phone lineUserId');
    
    if (!booking) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' });
    }
    
    const lineNotify = require('../utils/lineNotify');
    let result;
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    switch (notificationType) {
      case 'confirmation':
        result = await lineNotify.sendBookingConfirmation(booking);
        break;
      case 'cancellation':
        result = await lineNotify.sendCancellationNotification(booking);
        break;
      case 'status':
        result = await lineNotify.sendStatusUpdateNotification(booking);
        break;
      case 'call':
        result = await lineNotify.sendCallNotification(booking);
        break;
      default:
        return res.status(400).json({ message: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
    
    res.json({
      message: `‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ${notificationType} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
      result
    });
  } catch (error) {
    console.error('Error testing LINE notification:', error);
    res.status(500).json({
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
      error: error.message
    });
  }
};